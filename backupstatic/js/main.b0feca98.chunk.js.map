{"version":3,"sources":["withRoot.js","pages/index.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","CssBaseline","Index","React","state","open","fontsize","txtVal","selectedValue","handleClose","this","setState","handleClick","fetch","method","body","JSON","stringify","message","handleChange","event","target","value","handleTxtChange","render","classes","className","root","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","onClick","Typography","variant","gutterBottom","autoComplete","FormControl","component","formControl","TextField","id","onChange","label","style","marginBottom","width","margin","multiline","rowsMax","placeholder","InputLabelProps","shrink","withStyles","textAlign","paddingTop","spacing","unit","minWidth","selectEmpty","marginTop","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAQA,MAAMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,MAAOC,IAAO,KACdC,KAAMD,IAAO,KACbE,KAAMF,IAAO,MAEfG,UAAW,CACTJ,MAAOK,IAAM,KACbH,KAAMG,IAAM,KACZF,KAAME,IAAM,OAGhBC,WAAY,CACVC,iBAAiB,KAoBNC,MAhBf,SAAkBC,GAahB,OAZA,SAAkBC,GAGhB,OACE,eAAC,IAAD,CAAkBd,MAAOA,EAAzB,UAEE,cAACe,EAAA,EAAD,IACA,cAACF,EAAD,eAAeC,S,kBCFvB,MAAME,UAAcC,IAAMJ,UAAW,eAAD,oBAClCK,MAAQ,CACNC,MAAM,EACNC,SAAU,GACVC,OAAO,IACPC,cAAe,KALiB,KAQlCC,YAAc,KACZC,KAAKC,SAAS,CACZN,MAAM,KAVwB,KAclCO,YAAc,KACZF,KAAKC,SAAS,CACZN,MAAM,IAgBVQ,MAAM,aAAc,CAChBC,OAAO,OACPC,KAAMC,KAAKC,UAAU,CACnBC,QAASR,KAAKN,MAAMG,YAnCQ,KA0ClCY,aAAeC,IAChBV,KAAKC,SAAS,CAAEH,cAAeY,EAAMC,OAAOC,SA3CT,KA6ClCC,gBAAkBH,IACnBV,KAAKC,SAAS,CAAEJ,OAAQa,EAAMC,OAAOC,SAIpCE,SAAU,MACAC,EAAYf,KAAKV,MAAjByB,QACApB,EAASK,KAAKN,MAAdC,KACR,OACE,sBAAKqB,UAAWD,EAAQE,KAAxB,UACE,eAACC,EAAA,EAAD,CAAQvB,KAAMA,EAAMwB,QAASnB,KAAKD,YAAlC,UACE,cAACqB,EAAA,EAAD,iBACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,yBACA,eAACA,EAAA,EAAD,WACPtB,KAAKN,MAAMG,OACXG,KAAKN,MAAMI,oBAGN,cAACyB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS1B,KAAKD,YAAtC,qBAKJ,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,8BAGP,sBAAOC,aAAa,MAApB,SACD,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAWhB,UAAWD,EAAQkB,YAArD,UACE,cAACC,EAAA,EAAD,CACQC,GAAG,sBACVC,SAAUpC,KAAKa,gBACRwB,MAAM,SACNC,MAAO,CAAEC,aAAc,EAAEC,MAAM,KAC/BC,OAAO,SACPC,WAAS,EACTC,QAAS,GACTC,YAAY,aACZC,gBAAiB,CACfC,QAAQ,KAGZ,cAACtB,EAAA,EAAD,CAAQI,QAAQ,YAAYH,MAAM,YAAYC,QAAS1B,KAAKE,YAA5D,yBAcOd,QAAS2D,aArHTvE,IAAK,CAClByC,KAAM,CACJ+B,UAAW,SACXC,WAAiC,GAArBzE,EAAM0E,QAAQC,MAE5BlB,YAAa,CACXQ,OAAQjE,EAAM0E,QAAQC,KACtBH,UAAW,SACXI,SAAU,KAEZC,YAAa,CACXC,UAAgC,EAArB9E,EAAM0E,QAAQC,SA0GLJ,CAAmBvD,IC1HvB+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAAS9C,OAAO,cAAC,EAAD,IAAW+C,SAASC,eAAe,SDwH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","file":"static/js/main.b0feca98.chunk.js","sourcesContent":["import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: purple[300],\n      main: purple[500],\n      dark: purple[700],\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from '../withRoot';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst styles = theme => ({\n  root: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 10,\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    textAlign: 'center',\n    minWidth: 160,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2,\n  },\n});\n\nclass Index extends React.Component {\n  state = {\n    open: false,\n    fontsize: 13,\n    txtVal:' ',\n    selectedValue: '0'\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  handleClick = () => {\n    this.setState({\n      open: true,\n    });\n/*  fetch('http://afeifly.f3322.net:5000/sendmsg', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'content-type': 'application/json',\n      'Authorization':'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE4NjQwMzAwNzgsImlzcyI6ImUwOGY2YWQyMzk3YzQ0YTc4YTIxMzYwZjhhMDJkZjdiIiwiaWF0IjoxNTQ4NjcwMDc4fQ.TfeI8Nk-82tqCWJvyQXlwMpTsOPolBTq1sVAXctfZzo',\n    },\n    body: JSON.stringify({\n      entity_id: 'miio_acpartner.xmgw',\n      message: 'hello',\n    })\n  })\n*/\n//  fetch(\"http://afeifly.f3322.net:5000/sendmsg\", {\n  fetch(\"/updatemsg\", {\n      method:\"POST\", \n      body: JSON.stringify({\n        message: this.state.txtVal \n    })\n  })\n\n\n  };\n\n  handleChange = event => {\n\tthis.setState({ selectedValue: event.target.value });  \n  };\n  handleTxtChange = event => {\n\tthis.setState({ txtVal: event.target.value });  \n  };\n\n\n  render() {\n    const { classes } = this.props;\n    const { open } = this.state;\n    return (\n      <div className={classes.root}>\n        <Dialog open={open} onClose={this.handleClose}>\n          <DialogTitle>Hi</DialogTitle>\n          <DialogContent>\n            <DialogContentText>Be better.</DialogContentText>\n            <DialogContentText>\n\t\t  {this.state.txtVal}\n\t\t  {this.state.selectedValue}\n \t    </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"primary\" onClick={this.handleClose}>\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Typography variant=\"h4\" gutterBottom>\n          Show me the text\n        </Typography>\n\t<form  autoComplete=\"off\">\n<FormControl component=\"fieldset\" className={classes.formControl}>\n\t <TextField\n          id=\"standard-full-width\"\n\t  onChange={this.handleTxtChange}\n          label=\"Please\"\n          style={{ marginBottom: 5,width:400, }}\n          margin=\"normal\"\n          multiline\n          rowsMax={10}\n          placeholder=\"Input here\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClick}>\n          Go\n        </Button>\n</FormControl>\n\t</form>\n      </div>\n    );\n  }\n}\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(Index));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Index from './pages/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}